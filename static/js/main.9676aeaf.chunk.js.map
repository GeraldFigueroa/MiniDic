{"version":3,"sources":["Componentes/PalabraForm.js","firebase.js","Componentes/Palabras.js","App.js","reportWebVitals.js","index.js"],"names":["PalabraForm","props","estadoVacio","palabra","definicion","color","useState","valores","setValores","inputModificado","evento","target","name","value","useEffect","id","idModificar","listPalabras","map","tmpP","className","onSubmit","preventDefault","AgregarPalabra","type","onChange","required","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Palabras","setListPalabras","setUltimoOrden","setIdModificar","a","collection","doc","set","update","console","erro","elimiarPalabra","window","confirm","delete","log","buscarPalabra","onSnapshot","querySnapshot","PalabrasIncluidas","frase","forEach","data","toLocaleLowerCase","includes","push","getPalabras","docPalaras","ordenarArray","orden","tmpPalabras","sort","b","length","placeholder","onClick","class","title","style","background","scrollTo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9676aeaf.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './styleComponents.css';\n\nconst PalabraForm = (props) => {\n\n    // Estado inicial o vacio del componente.\n    const estadoVacio = {\n        palabra: '',\n        definicion: '',\n        color: '#494848'\n    }\n\n    // Asignamos el estado del componente.\n    const [valores, setValores] = useState(estadoVacio);\n\n    //Modificamos el estado cada vez que un input cambie.\n    const inputModificado = evento => {\n        const {name, value} = evento.target;\n        setValores({...valores, [name]: value});\n    }\n\n    const enviarPalabra = (evento) => {\n        evento.preventDefault(); //Para no recargar la página.\n        \n        props.AgregarPalabra(valores);\n        setValores(estadoVacio);\n    }\n \n    const buscarPorId = id =>{\n        props.listPalabras.map( tmpP => {\n            if(tmpP.id === id){\n                setValores(tmpP);\n            }\n        })\n    }\n    useEffect(() => {\n        if(props.idModificar !== ''){\n            buscarPorId(props.idModificar);\n        } else{\n            setValores(estadoVacio);\n        }\n    }, [props.idModificar]);\n\n    return(\n        <div className=\"formContenedor\">\n            <h2>Registro de Palabras</h2>\n            <form onSubmit={enviarPalabra}>\n                <div className=\"inputBox\">\n                    <input \n                        type=\"text\" \n                        name='palabra'\n                        value={valores.palabra}\n                        onChange={inputModificado}\n                        required='required'\n                    />\n                    <span>Palabra:</span>\n                </div>\n                <div className=\"inputBox\">\n                    <textarea \n                        type=\"text\" \n                        name='definicion'\n                        value={valores.definicion}\n                        onChange={inputModificado}\n                        required='required'\n                    />\n                    <span>Definición:</span>\n                </div>\n                <div className=\"inputBoxColor\">\n                    <p>Color:</p>\n                    <input \n                        type=\"color\" \n                        name='color'\n                        value={valores.color}\n                        onChange={inputModificado}\n                        required='required'\n                    />\n                </div>\n                <div className=\"inputBox\">\n                    <input type=\"submit\" value=\"Guardar\"/>\n                </div>\n            </form>\n        </div>\n    );\n\n}\n\nexport default PalabraForm;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBZuxkOvaLB_t9CchONuhgL2Kq-9GlrsIw\",\n    authDomain: \"minidic-6c2aa.firebaseapp.com\",\n    projectId: \"minidic-6c2aa\",\n    storageBucket: \"minidic-6c2aa.appspot.com\",\n    messagingSenderId: \"1007906717732\",\n    appId: \"1:1007906717732:web:91de100c4dd444360ed8b1\"\n  };\n  // Initialize Firebase\n  const fb = firebase.initializeApp(firebaseConfig);\n  export const db = fb.firestore();","import React, {useState, useEffect} from 'react';\nimport PalabraForm from './PalabraForm';\nimport {db} from '../firebase';\nimport './styleComponents.css';\n\nconst Palabras = () => {\n\n    // Estado del componente\n    const [listPalabras, setListPalabras] = useState([]);\n    const [ultimoOrden, setUltimoOrden] = useState(1);\n    const [idModificar, setIdModificar] = useState('');\n    //Agrega la palabra a Firebase\n    const AgregarPalabra = async (palabra) => {\n        try {\n            if(idModificar === ''){\n                await db.collection('Palabras').doc().set(palabra);\n            } else{\n                await db.collection('Palabras').doc(idModificar).update(palabra);\n                setIdModificar('');\n            }\n        } catch (error) {\n            console.erro(error);\n        }\n    }\n\n    //Ingresa los datos de la palabra en el formulario para ser editada.\n    const editarPalabra = id => {\n        setIdModificar(id);\n    }\n\n    //Elimina una palabra por su ID\n    const elimiarPalabra = async (id) => {\n        if (window.confirm(\"¿Estas seguro que quieres eliminar la palabra?\")){\n            await db.collection('Palabras').doc(id).delete();\n            console.log(\"Tarea Eliminada\");\n        }\n    }\n\n    //Busca si la frease ingresada está contenida en alguna palabra\n    //En caso de ser true, la ingresa en una nueva lista.\n    const buscarPalabra = async (evento) => {\n        await db.collection('Palabras').onSnapshot(querySnapshot => {\n            const PalabrasIncluidas = [];\n            const frase = evento.target.value;\n            querySnapshot.forEach( (tmpP) => {\n                if(tmpP.data().palabra.toLocaleLowerCase().includes(frase.toLocaleLowerCase())){\n                    PalabrasIncluidas.push({...tmpP.data(), id: tmpP.id});\n                }\n            });\n            setListPalabras(PalabrasIncluidas);\n        })\n    }\n\n    //Obtinene las palabras de Firebase al iniciar la App\n    const getPalabras = async () => {\n        await db.collection('Palabras').onSnapshot((querySnapshot) => {\n            const docPalaras = [];\n            querySnapshot.forEach(palabra => {\n                docPalaras.push({...palabra.data(), id: palabra.id});\n            });\n            //Agregamos las palabras al estado del componente\n            setListPalabras(docPalaras);\n        })\n    } \n\n    // Orden = 1 -> Orden alfabetico ascendente.\n    // Orden = -1 -> Orden alfabetico descendente.\n    // Ordena objetos de palabras \n    const ordenarArray = orden => {\n        let tmpPalabras = [...listPalabras];\n        tmpPalabras.sort( (a, b) => {\n            if(a.palabra.toLocaleLowerCase() > b.palabra.toLocaleLowerCase()){\n                return 1*orden;\n            } \n            if(a.palabra.toLocaleLowerCase() < b.palabra.toLocaleLowerCase()){\n                return -1*orden;\n            } \n            return 0;\n        });\n        setListPalabras(tmpPalabras);\n        setUltimoOrden(orden);\n    }\n\n    useEffect(() => {\n        getPalabras();  \n    }, [])\n\n    //Retorno del Componente\n    return (\n        <div className=\"contenedor\">\n            <PalabraForm {...{AgregarPalabra, idModificar, listPalabras}}/>\n            \n            <div className=\"menuBox\">\n                    <h2>{listPalabras.length}</h2>\n                <div className=\"buscadorBox\">\n                    <input \n                    type=\"text\"\n                    placeholder=\"Buscar\"\n                    onChange={buscarPalabra} />\n                </div>\n                <div className=\"buttonsBox\">\n                    <button onClick={() =>{\n                        ordenarArray(1)\n                    }}>\n                        <i class=\"material-icons buildIcon\" title=\"Orden Ascendente\">arrow_upward</i>\n                    </button>\n                    <button onClick={() =>{\n                        ordenarArray(-1)\n                    }}>\n                        <i class=\"material-icons buildIcon\" title=\"Orden Descendente\">arrow_downward</i>\n                    </button>\n                </div>\n            </div>\n\n            <div className=\"ContenedorPalabras\">\n                {\n                    listPalabras.map( palabra => (\n                        <div className=\"palabraBox\" key={palabra.id}>\n                            <div className=\"titleBox\">\n                                <h2>{palabra.palabra}</h2>\n                            </div>\n                            <div \n                                className=\"contendBox\" \n                                style={{background: palabra.color}}>\n                                    <h3>{palabra.palabra}</h3>\n                                    <p>{palabra.definicion}</p>\n                                    <div className=\"iconsBox\">\n                                        <i \n                                            class=\"material-icons deleteIcon\"\n                                            title=\"Eliminar\"\n                                            onClick={() => {\n                                                elimiarPalabra(palabra.id);\n                                            }}\n                                        >delete_forever</i>\n                                        <i \n                                            class=\"material-icons buildIcon\"\n                                            title=\"Editar\"\n                                            onClick={() => {\n                                                editarPalabra(palabra.id); window.scrollTo(0, 0);;\n                                            }}\n                                        >build</i>\n                                    </div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Palabras;\n","import './App.css';\nimport Palabras from './Componentes/Palabras';\n\nfunction App() {\n  return (\n    <Palabras/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}